#### testing out snpbinner2 crosspoints ####

# within sample_files make new dir "test_run_outputs"
# from test_run_outputs, and within snpbin2 env

snpbinner crosspoints --input ../crosspoints_in.tsv --output . --min_length 15
# import error no module named numpy

# after installing numpy
# Error one of the arguments -m/--min-length -r/--min-ration required

snpbinner crosspoints --input ../crosspoints_in.tsv --output . --min-length 15
# error is a directory "."

snpbinner crosspoints --input ../crosspoints_in.tsv --output crosspoints_out.csv --min-length 15
# prints a bunch of the column names (i think) to the console

# created a csv file that has the printed col names, a/b/h, position number
# looks identical to the sample file!

#### CONVERTING crosspoints.py from 2to3 within SNPbinner3 ####

(base) andrewblock@EDMLOANC02W4D3NHTD6 snpbinner3 % 2to3 crosspoints.py
/Users/andrewblock/anaconda3/bin/2to3:3: DeprecationWarning: lib2to3 package is deprecated and may not be able to parse Python 3.10+
  from lib2to3.main import main
RefactoringTool: Skipping optional fixer: buffer
RefactoringTool: Skipping optional fixer: idioms
RefactoringTool: Skipping optional fixer: set_literal
RefactoringTool: Skipping optional fixer: ws_comma
RefactoringTool: Refactored crosspoints.py
--- crosspoints.py	(original)
+++ crosspoints.py	(refactored)
@@ -12,7 +12,7 @@
         if not os.path.exists(output_folder):
             os.makedirs(output_folder)
         for file in input_list:
-            print("Determining crosspoints for: "+file)
+            print(("Determining crosspoints for: "+file))
             out_file = os.path.join(output_folder,os.path.basename(file)+".crosp.csv")
             try:
 
@@ -319,7 +319,7 @@
 def _get_file_stats(filename):
     '''Counts coulumns[-1 header](individual_count), rows[-1 header](snp_count), and returns the last row header (last_index) from a TSV.'''
     individual_count = 0
-    print filename
+    print(filename)
     with open(filename, "r") as f:
         title_line = ""
         while title_line.strip()=="" or title_line.startswith("#"):
RefactoringTool: Files that need to be modified:
RefactoringTool: crosspoints.py

# I don't see any changes between the two files

# making test_outputs folder in sample_files within SNPbinner3 and working from there

python ~/Documents/GitHub/SNPbinner3/snpbinner3 crosspoints --input ../crosspoints_in.tsv --output crosspoints_out.csv --min-length 15

Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/Users/andrewblock/Documents/GitHub/SNPbinner3/snpbinner3/__main__.py", line 3, in <module>
    import __init__ as snpbinner
  File "/Users/andrewblock/Documents/GitHub/SNPbinner3/snpbinner3/__init__.py", line 2, in <module>
    import crosspoints, bins, visualize
  File "/Users/andrewblock/Documents/GitHub/SNPbinner3/snpbinner3/crosspoints.py", line 322
    print filename
    ^^^^^^^^^^^^^^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?

#### so this command depends on main and and init as well as crosspoints... ####
2to3 __main__.py

(snpbin3) andrewblock@EDMLOANC02W4D3NHTD6 snpbinner3 % 2to3 __main__.py
/Users/andrewblock/anaconda3/envs/snpbin3/bin/2to3:3: DeprecationWarning: lib2to3 package is deprecated and may not be able to parse Python 3.10+
  from lib2to3.main import main
RefactoringTool: Skipping optional fixer: buffer
RefactoringTool: Skipping optional fixer: idioms
RefactoringTool: Skipping optional fixer: set_literal
RefactoringTool: Skipping optional fixer: ws_comma
RefactoringTool: Refactored __main__.py
--- __main__.py	(original)
+++ __main__.py	(refactored)
@@ -1,6 +1,6 @@
 '''Sets up the main argparser and imports and sets up scripts in the program.'''
 
-import __init__ as snpbinner
+from . import __init__ as snpbinner
 import sys
 import argparse
 
RefactoringTool: Files that need to be modified:
RefactoringTool: __main__.py

2to3 __init__.py

/Users/andrewblock/anaconda3/envs/snpbin3/bin/2to3:3: DeprecationWarning: lib2to3 package is deprecated and may not be able to parse Python 3.10+
  from lib2to3.main import main
RefactoringTool: Skipping optional fixer: buffer
RefactoringTool: Skipping optional fixer: idioms
RefactoringTool: Skipping optional fixer: set_literal
RefactoringTool: Skipping optional fixer: ws_comma
RefactoringTool: Refactored __init__.py
--- __init__.py	(original)
+++ __init__.py	(refactored)
@@ -1,5 +1,5 @@
 """Description of bin_mapper"""
-import crosspoints, bins, visualize
+from . import crosspoints, bins, visualize
 __all__ = [
     "crosspoints",
     "bins",
RefactoringTool: Files that need to be modified:
RefactoringTool: __init__.py

#### re running crosspoints ####

# same error:
(snpbin3) andrewblock@EDMLOANC02W4D3NHTD6 test_outputs % python ~/Documents/GitHub/SNPbinner3/snpbinner3 crosspoints --input ../crosspoints_in.tsv --output crosspoints_out.csv --min-length 15
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/Users/andrewblock/Documents/GitHub/SNPbinner3/snpbinner3/__main__.py", line 3, in <module>
    import __init__ as snpbinner
  File "/Users/andrewblock/Documents/GitHub/SNPbinner3/snpbinner3/__init__.py", line 2, in <module>
    import crosspoints, bins, visualize
  File "/Users/andrewblock/Documents/GitHub/SNPbinner3/snpbinner3/crosspoints.py", line 322
    print filename
    ^^^^^^^^^^^^^^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?

# manually adding print() to lin 322 of crosspoints.py, and 2to3 of bins.py

(snpbin3) andrewblock@EDMLOANC02W4D3NHTD6 snpbinner3 % 2to3 bins.py
/Users/andrewblock/anaconda3/envs/snpbin3/bin/2to3:3: DeprecationWarning: lib2to3 package is deprecated and may not be able to parse Python 3.10+
  from lib2to3.main import main
RefactoringTool: Skipping optional fixer: buffer
RefactoringTool: Skipping optional fixer: idioms
RefactoringTool: Skipping optional fixer: set_literal
RefactoringTool: Skipping optional fixer: ws_comma
RefactoringTool: Refactored bins.py
--- bins.py	(original)
+++ bins.py	(refactored)
@@ -12,7 +12,7 @@
         if not os.path.exists(output_folder):
             os.makedirs(output_folder)
         for file in input_list:
-            print("Determining bins for: "+file)
+            print(("Determining bins for: "+file))
             out_file = os.path.join(output_folder,os.path.basename(file)+".bins.csv")
             try:
                 bins(file,out_file,min_bin_size,os.path.basename(file))
@@ -41,12 +41,12 @@
 
     # find all crosspoints and count how many times crosspoints occur at each location.
     cp_loc_count = {chrom_len:float('inf'),0:float('inf')}
-    for cps in line_cps.values():
+    for cps in list(line_cps.values()):
         for i in range(0,len(cps),2):
             if not cps[i] in cp_loc_count: cp_loc_count[cps[i]] = 0
             cp_loc_count[cps[i]] += 1
     all_cp = sorted(cp_loc_count.keys())
-    print all_cp
+    print(all_cp)
 
     # partition all cp into groups where the distance between each consecutive cp is less than min_bin_size
     crosspoint_groups = [[all_cp[0]]]
@@ -57,7 +57,7 @@
         else:
             crosspoint_groups.append([all_cp[i]])
         i+=1
-    print crosspoint_groups
+    print(crosspoint_groups)
 
     bin_bounds = [] #Create a list for storing the bin bounds
     crosspoint_groups.reverse() #Moving backwards through the discovered groups
@@ -68,15 +68,15 @@
         group_len = group[-1]-group[0]
         expanded_group = [cp for cp in group for num in range(cp_loc_count[cp] if cp_loc_count[cp]!=float('inf') else 1)]
 
-        print "\n\n"+("="*80)
-        print ("%s crosspoints, start=%s, end=%s"%(len(expanded_group),group[0],group[-1]))
-        print "."*80
+        print("\n\n"+("="*80))
+        print(("%s crosspoints, start=%s, end=%s"%(len(expanded_group),group[0],group[-1])))
+        print("."*80)
 
         #if there is only one cp in the group, simply use that as the one representitive boundary
         if group_len==0:
-            print "\nN=1"
+            print("\nN=1")
             bin_bounds.append(group[0])
-            print "F", bin_bounds[-1]
+            print("F", bin_bounds[-1])
             continue
 
         #Calculate the maximum number of new boundaries that could fit from the first to last crosspoint of the group
@@ -84,18 +84,18 @@
 
         #if it is less than two, simply average the crosspoints for the best fitting boundary
         if max_new_cp<2:
-            print "\nN=1"
-            print "g",_bin_bound_visualize(expanded_group,group[0],group[-1])
+            print("\nN=1")
+            print("g",_bin_bound_visualize(expanded_group,group[0],group[-1]))
             bin_bounds.append(_crosspoint_avg(cp_loc_count,group,chrom_len))
-            print "f",_bin_bound_visualize(bin_bounds[-1:],group[0],group[-1],aura=min_bin_size)
+            print("f",_bin_bound_visualize(bin_bounds[-1:],group[0],group[-1],aura=min_bin_size))
             continue
 
         #For each possible number of boundaries, predict the locations using k-means and the sum of the variance between each crosspoint to the closest boundary
         solution_list = []
         for cp_count in range(max_new_cp,0,-1):
 
-            print "\n"+("N=%s"%cp_count)+"\n"
-            print "g",_bin_bound_visualize(expanded_group,group[0],group[-1])
+            print("\n"+("N=%s"%cp_count)+"\n")
+            print("g",_bin_bound_visualize(expanded_group,group[0],group[-1]))
 
             #initilize the k-means psuedo-centroids (they are not true centroids once adjusted for minimum distance) to be evenly spaced within the group
             start_cp_dist = group_len/float(cp_count)
@@ -111,7 +111,7 @@
                 while nearest+1<len(km_points) and abs(cp-km_points[nearest+1]) < abs(cp-km_points[nearest]):
                     nearest+=1
                 km_groups[nearest].append(cp)
-            print "u",_bin_bound_visualize(km_points,group[0],group[-1],aura=min_bin_size)
+            print("u",_bin_bound_visualize(km_points,group[0],group[-1],aura=min_bin_size))
 
             #Now that the cps have been assigned to km_groups (groups with a common closest centroid), perform k-means optimization!
             memo = set() #stores each visited state so that minima cycles can be detected
@@ -168,18 +168,18 @@
                 #if we have been here before, we are done!
                 if id_tuple in memo:
                         adjustment_needed = False
-                        print "Done."
+                        print("Done.")
                 else:
                     memo.add(id_tuple)
                     if overlap_adjustment_performed: 
                         change="ovr"
                     else:
                         change="adj"
-                print change,_bin_bound_visualize(km_points,group[0],group[-1],aura=min_bin_size)
-
-
-            print "f",_bin_bound_visualize(km_points,group[0],group[-1],aura=min_bin_size)
-            print "g",_bin_bound_visualize(expanded_group,group[0],group[-1])
+                print(change,_bin_bound_visualize(km_points,group[0],group[-1],aura=min_bin_size))
+
+
+            print("f",_bin_bound_visualize(km_points,group[0],group[-1],aura=min_bin_size))
+            print("g",_bin_bound_visualize(expanded_group,group[0],group[-1]))
 
             #calculate sum of variance from closest centroids
             dists = [[]]
@@ -190,7 +190,7 @@
                     dists.append([])
                 dists[-1].append(abs(cp-km_points[nearest]))
             average_average_group_dist = sum(sum(ds)/float(len(ds)) for ds in dists)
-            print "S",average_average_group_dist
+            print("S",average_average_group_dist)
 
             #add the solution to the list of possibilities
             solution_list.append((average_average_group_dist,km_points))
@@ -202,7 +202,7 @@
 
     #sort the determined bounds
     bin_bounds.sort()
-    print "\nBin Bounds:", bin_bounds
+    print("\nBin Bounds:", bin_bounds)
     
     #Using the determined bounds, genotype each bin across RILs. Bins are genotyped as whichever genotype occupies the most 'area' in the bin.
     bin_genotypes = OrderedDict()
@@ -238,7 +238,7 @@
     #Remove any adjacent bins that are identical across all lines.
     for i in range(len(bin_centers)-1,0,-1):
         if all(bin_genotypes[line][i-1]==bin_genotypes[line][i] for line in bin_genotypes):
-            print "Combined Identical Bins.", bin_bounds[i-1],">",bin_bounds[i],"<",bin_bounds[i+1]
+            print("Combined Identical Bins.", bin_bounds[i-1],">",bin_bounds[i],"<",bin_bounds[i+1])
             del bin_centers[i]
             del bin_bounds[i]
             bin_centers[i-1] = (bin_bounds[i-1]+bin_bounds[i])/2
RefactoringTool: Files that need to be modified:
RefactoringTool: bins.py

# manually adding parenthesis to print() in lines 49, 60, 71-73, 77 and a million other places in bins.py
# spit out the same list of col names as in 2
# output is same as example!!






